---
import type { HTMLAttributes } from 'astro/types'
import { cva, type VariantProps } from 'class-variance-authority'

const buttonVariantes = cva(
  'btn', {
    variants: { variant: { contained: 'contained', outlined: 'outlined' } },
    defaultVariants: { variant: 'contained' }
  }
)

type ButtonProps = { component?: 'button' } & HTMLAttributes<'button'>
type AnchorProps = { component: 'a' } & HTMLAttributes<'a'>

type Props = (ButtonProps | AnchorProps) & VariantProps<typeof buttonVariantes>

const {
  variant,
  component,
  class: className,
  ...rest
} = Astro.props

---

{component === 'a'
  ? (
<a class:list={[buttonVariantes({ variant }), className]} {...rest} target="_blank">
  <slot />
</a>
  )
  : (
<button class:list={[buttonVariantes({ variant }), className]} {...(rest as Omit<HTMLAttributes<'button'>, 'class'>)}>
  <slot />
</button>
  )}

<style>
  .btn {
    cursor: pointer;
    user-select: none;
    font-weight: 400;
    font-size: 1rem;
    padding-block: var(--rounded-2xl);
    padding-inline: var(--rounded-3xl);
    border-radius: var(--rounded-md);

    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--gap);
    outline: none;
    text-align: center;

    transition: background-color 0.3s ease, box-shadow 0.3s ease;

    &.contained {
      border: none;
      color: var(--white);
      background: var(--accent-gradient);
    }

    &.outlined {
      color: var(--white);
      background-color: transparent;
      border: 1px solid transparent;
      background:
        linear-gradient(#08213e, #173860) padding-box,
        var(--accent-gradient) border-box;
    }
  }
</style>
